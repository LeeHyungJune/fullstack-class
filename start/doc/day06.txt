day06

for 명령 참고

	선조건 처리명령.
	
	for(;;) 처럼 안의 내용을 기술하지 않아도 무방하다.
	이때 조건식은 항상 true 로 처리된다.
	
	카운터 변수도 해당 for 명령문 안에서만 작동하는 지역변수이다.
	
while 명령
	선조건 처리명령.
	for 명령과는 구분되게 형식 내부에 카운터 변수 선언부분이 없다.
	따라서 카운터 변수로 실행횟수를 제어하고자 한다면,
	명령이 시작되기 전에 카운트변수를 선언 및 초기화를 해주고
	명령(블럭) 내부에서 증감식으로 증감해서
	횟수를 제어해야 한다.
	
	
do - while 명령
	후조건 처리명령.
	악 조건 하에서도 적어도 한번은 실행내용을 실행하는 반복문.
	 
	
	
참고)
	
	지역변수
		: 해당 블력 내에서만 사용할 수 있는 변수
		
		
	전역변수
		: 클래스 내의 어디서든지 사용할 수 있는 변수
			클래스 블럭 바로 아래서 넣는 변수. (static 변수 쓰기 전에 씀)
			
		
---------------------------------------------------------------------------------------------------------------------------------------------------------
Flag 기법
==> 프로그램을 실행하다 보면
	두 가지 이상의 경우가 발생되는 순간이 존재한다.
	그 후에 어떤 경우가 발생했는지를 알아보는 방법
	
	ex)
		for(;;) {
		실행내용 1
		
			if(조건) {
				break;
			}
			
			실행내용 2
		}		
		(1)
		
		실행내용 1 의 경우는 반복문의 마지막 회차까지 모두 실행됐는지 여부는 판별하기 어렵다.
		실행내용 2 의 경우도 마찬가지다.
		==> (1) 번 부분은 for 명령이 종료되면 실행되는 부분.
		
		
		이때 
		(1) 번 부분을 실행할 때
		위의 반복문이 정상적으로 모두 반복해서 실행되었는지
		아니면 중간에 break; 명령으로 종료가 되었는지를
		판별해내는 기법.
		
		
		방법)
			시작하기 전에 변수에 특정 데이터를 기억시켜놓고
			특정 순간이 발생하면 변수의 데이터를 변경시킨다.
			
			(1) 부분을 실행할 때 그 변수의 데이터를 살펴보면 
			위의 반복문이 정상적으로 모두 처리되었는지
			중간에 강제 종료되었는지를 확인할 수 있게된다.
			
======================================================================================================================================================

레이블이 붙은 반복문

	사용방법)
	
		레이블 이름;
		for(;;) {
		
			for(;;) {
				실행내용
				if(조건식) {
					break 또는 continue		레이블 이름;
				}
				
			}
		}
		
	ex)
	
	
		2 * 1 = 2
		...
		2 * 9 = 18
		
		...
		5 * 1 = 5
		5 * 2 = 10 
		
		
	주의사항)
		레이블을 사용한 제어는 반드시 소속 반복문에 한해서만 적용된다.
		==> 감싸고 있는 반복문에 한해서만 적용 가능한다.
		
		ex)
		
			loop: 			==> loop라고 정해진 게 아닌 식별자로 아무거나 써도 됨.
			
			for() {
				for() {
					if() {
					break loop;			==> O
					}
				}
			}
			
			for() {
			
				for(){
				
					for(){
						if(){
					 break loop;		==> X
						}
					}
				}
			
			}	

---------------------------------------------------------------------------------------------------------------------------------------------------------

continue 명령
	반복문에만 사용되는 명령
	현재 반복을 중지하고 다음 반복을 처리하도록 하는 것.
	==> 즉, 현재 작업을 중지시키고 
		현재 작업은 무의미하므로 더이상 진행하지 말고
		다음 반복 작업을 진행하도록 하는 것.
		
	주의사항)
		반복 명령문에 따라서 실행 위치가 달라진다.
		
		for(카운트 변수 선언 및 초기화 ; 조건식 ; 증감식){
			if(조건){
				continue;
			}
		}
		
		이 처럼 for 반복문의 경우는
		continue 명령을 만나면 증감식으로 실행을 진행한다.
		
		while(조건식){   <=== 이 위치로 간다는 뜻.
			if(조건식){
				continue;
			}
		}
		
		위의 경우처럼
		while 반복문의 경우에는 continue 명령을 만나면
		반복문의 조건식을 실행한다.
		
		이 경우 while 문의 조건식이 참인지 거짓인지 확인한다.
		
		do (
			(1)
			continue;
			(2)
			
		) while(조건식(3));
		(4)
		
		진행 순서
		(1) -> continue -> (3) 이 참일 경우		-> (1)
								거짓일 경우 	-> (4)
		
		
* continue 명령 역시 감싸는 반복문에 레이블을 붙여서 제어할 수 있다.
		==> 감싸고 있는 반복문에만 가능.
	
		



















			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	