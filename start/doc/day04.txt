# day 04

논리연산자
==> 두 논리값 사이의 관계를 따지는 연산자
		==> 즉, 논리값을 AND, OR, NOT 방식으로 관계를 알아보는 연산자.
		
		주의)
			(비교하는)데이터는 반드시 논리 값이어야 한다.
			
		기호)
			&	- AND 관계
			|	- OR 관계
			
		절삭연산	
		--------------------------
			&&	- AND 관계 			- 데이터1 이 false 일 경우 데이터2 를 볼 필요 없이 무조건 false가 나옴
										==> 그렇기에 앞이 거짓이면 뒤는 읽어보지도 않는 연산자
			||	- OR 관계			- 데이터1 이 true 일 경우 데이터2 를 볼 필요 없이 무조건 false가 나옴
		--------------------------		==> 앞이 참이면 뒤는 읽어보지도 않는 연산자
		
			!	- NOT 관계
			
			진가표
				
				AND			데이터1	 	&		데이터2
				OR			데이터1	 	|		데이터2
				
				
				데이터1		데이터2			OR			AND
				true		true			true		true
				true		false			true		false
				false		true			true		false
				false		false			false		false
		
		참고)
			컴퓨터는 한 번의 질문에 오직 한 개만 질문할 수 있다.
			즉, 크면 큰거고, 작으면 작은거다.
			
			ex)
				데이터가 10에서 20 사이이냐?
				라는 질문은 할 수 없다. 데이터가 10보다 크냐? 그리고 20보다 작으냐? 라고 물어봐야 함.
				그러기 때문에 필요한 것이 논리 연산자.
				
			ex)
				데이터가 10에서 20 사이냐? 라는 질문은
				
				수학 연산식 에서는
					
					10 < a < 20
				로 계산하지만 컴퓨터에서 이렇게 동시에 질문하는 것은 안되고
				
				a > 10 && a < 20
				라는 방식으로 질문해야 한다.
				
		참고)
			이 연산자의 결과는 역시 논리값이 나온다. true or false
			
		참고)
			절삭 연산
				
			==> 특정 부분의 계산식은 계산하지 않도록 한다.
			
				&	절삭 연산을 하지 않는다.
				&&	절삭 연산을 실행한다.
					앞의 질문이 거짓이면 뒤에 어떤 데이터가 오더라도 읽어보지 않는다.
				
				|	절삭 연산을 하지 않는다 
				||	절삭 연산을 실행한다.
					앞의 질문이 참이면 뒤에 어떤 데이터가 오더라도 읽어보지 않는다.

-----------------------------------------------------------------------------------------------------				
				int no1 = 10;
				int no2 = 10;
				
				boolean bool = (no1 > no2) && (no1++ == no2):
				
				System.out.println("bool : " + bool);		==> false
				System.out.println("no1 : " + no1);			==> 10
				System.out.println("no2 : " + no2);			==> 10
				
				의 결과값과
				
				마지막 변수의 값을 예측해서 작성하세요. 
				
				=> false. no1++의 내용은 다음 나올 no1에 1을 증가시키기 때문에 현재 no1 값은 그대로다. 그렇기 때문에 false 가 나온다.
					10 > 10 이기 때문에 절삭 연산을 적용해서 뒤에 식은 오더라도 읽어보지 않는다. 
					그렇기 때문에 변수의 값 또한 false, 10, 10.
					
	
-----------------------------------------------------------------------------------------------------				

-----------------------------------------------------------------------------------------------------
비트연산자.			
				C 언어에서 가지고 온 연산자
				C 언어는 주소를 직접 이용할 수 있으므로 필요했던 연산자이지만
				자바는 주소를 이용할 수 없으므로 사용하지 않는 연산자.
				
				
		기호)
				&		-	비트 단위의 AND(둘 다 1이면 1, 나머지는 0)
				|		-	비트 단위의 OR(둘 중 하나가 1 이면 1)
				^		-	XOR(베타적 OR)(같으면 0, 다르면 1)
				
				이런 게 있다. 실제로 쓸 일은 많지 않음.
				
-------------------------------------------------------------------------------------------------------
시프트 연산자
			
	시프트연산은 대상 필드의 값을 비트로 바꾼 후 비트 수만큼 이동시켜서 값을 얻는 연산이다.
	이 연산은 boolean, float, double형의 경우는 사용할 수 없다.
			
		기호)
			부호비트는 그대로
			>>		-	뒤에 나오는 수 만큼 비트 전체를 오른쪽으로 움직인다. 빈 자리는 부호 값으로 대입
			<<		-	뒤에 나오는 수 만큼 비트 전체를 왼쪽으로 움직인다. 빈자리는 0으로 대입
			
			부호비트도 쉬프트
			>>>		-	>> 와 같지만 빈자리는 0으로 대입.
			
			~		:	보수화 연산자(단항연산자)
						==> 각각의 비트의 숫자를 반대로 바꾸는 연산자.
						
						
-------------------------------------------------------------------------------------------------------------
3항 연산자(조건연산자)
	==> 연산자라기 보다는 하나의 명령에 가까운 형식을 가지고 있는 연산자의 한 종류
		조건에 따라서 처리할 내용을 구분해서 처리하도록 하는 연산자.
		
		형식)
			
		변수 = (조건식) ? (조건식이 참일 때 처리 내용(반환값)) : (조건식이 거짓일 때 처리내용(반환값));
		
		참고)
			조건식은 반드시 참, 거짓으로만 만들어지도록 처리해야 한다.
			
		if 명령을 단순화 시킨 의미를 가진 명령.
		
		참고)
			모든 연산자가 중첩  처리되듯이
			3항 조건 연산자도 중첩 처리될 수 있다.
			(조건식) ? (조건식이 참일 때 조건식) : (조건식이 거짓일 때 조건식) 가능
			
			ex)
			변수 = (조건식1) ? ((조건식2) ? (5) : (6)) : ((조건식3) ? (7) : (8));
			-> 이 때 이 변수는 조건식을 모두 만족시키는 데이터 타입이 되야 함.
			
				==> 조건식 1이 참이고 조건식 2가 참이면 5, 조건식 2가 거짓이면 6을
					조건식 1이 거짓이고 조건식 3이 참이면 7, 조건식 3이 거짓이면 8.
			
		
			
			
			
			
			 
			
			
			
			
			
			
			
			
			
			
			
			
			
			
				
				
				
			
				
			
				