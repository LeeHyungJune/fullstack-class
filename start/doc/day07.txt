# day 07

배열

	배열에 데이터를 기억시키는 방법
	
		배열변수[위치값(인덱스)] = 데이터;
		
	배열의 내용을 확인하는 방법
		==>	원칙은 하나씩 꺼내서 확인하는 것이 원칙
			내용 확인 용도로만 사용할 예정이라면
				Arrays.toString(배열변수);
					    |-> toString 문자형(String)으로(to)
				배열에 있는 데이터들을 문자형으로 바꿔서 출력됨.
				
				주의)
					이때 절대로 데이터를 사용할 용도로 이 함수를 호출하면 안된다.
	 배열의 특징
	 같은 자료형들끼리 모아두는 하나의 묶음
	 담을 수 있는 자료의 타입과 길이가 먼저 정해진다.

--------------------------------------------------------------------------------------------------------------------------------------------------------

향상된 for 명령
	시퀸스 자료형(인덱스가 있는 자료형)에서 유용하게 쓸 수 있는 반복 명령
	인덱스 순서로 하나씩 꺼내서 변수에 대입한다.
	
--------------------------------------------------------------------------------------------------------------------------------------------------------
배열 정리

	같은 형태의 데이터를 여러 개 모아서 한꺼번에 관리하는 방식
	데이터가 많은 경우 원칙적으로 데이터 갯수만큼 변수를 만들어야 한다.
	따라서 변수를 만들때도 불편하고
	그 데이터를 사용할 때도 불편하다.
	이런 문제를 해결하기 위한 방법으로 제시된 것이 배열이다.
	
	즉,
	배열이란 하나의 변수를 이용해서 여러 개의 데이터를 관리할 수 있도록 하는 것.
	
	참고)
		자바의 변수의 형태
			1. 기본형 변수(Primitive Type, Value 형태)
				==> 자바에서 제공되는 기본 데이터 타입으로 만드는 변수
						boolean, char, short, int, long, byte, float, double
					으로 8가지 
					
			2. 참조형 변수(Reference Type)
				==> 기본데이터 타입 이외의 모든 변수.
				
				참고)
					
					boolean bool1 = true;
					
					Boolean bool2 = true;
					
					위에 두 타입이 서로 같을까? 전혀 다르다. 
					boolean은 기본 데이터 타입
					Boolean은 참조형 데이터 타입(변수, 상수, 함수)


	참고)
		Heap 영역
			특징
				1. 반드시 주소를 알아야 사용할 수 있는 영역
				
				2. 8가지 영역 중에서 크기가 가장 큰 영역
					확장 가능하다.
					(부족하면 스스로가 다른 영역을 빼앗아서 Heap 영역으로 사용할 수 있다.)
					==> 따라서 자바에서 많은 양의 데이터를 필요로 하면
						이것은 Heap 영역에 기억하도록 되어있다.
						
=======================================================================================================================================================
배열 만드는 방법
		
		1. 배열은 원칙적으로 데이터가 기억될 공간을 Heap 에 만들어야 한다.
		
			명령)
				new		데이터타입[갯수];
				
					데이터타입  : Heap 에 만든 데이터 영역의 형태를 지정
									관리할 데이터들의 타입
					갯수		: Heap 에 만들 데이터 영역의 갯수 지정
									관리할 데이터가 몇개인지...
									
			ex)
				
					new int[10];
						==> Heap 영역에 int 데이터들을 기억할 메모리 공간을 10개 만드세요.
			
			*****			
			참고)
				new 명령의 의미
					
					1. Heap 에 뭔가를 만들겠습니다.
					2. 주소는 알려드리겠습니다. 
		
					
		2. Heap 에 있는 메모리의 주소를 기억할 변수를 만들어야 한다.
		
			명령어 )
				
				데이터타입 [] 		변수이름;
				
				참고)
					데이터타입[]
						자신이 관리할 Heap 영역에 있는
						실제데이터 형태에 따라서 달라진다.
						==> Heap Type 이라고 부른다.
				
				주의)
				
					Heap Type 이 같은 주소만 변수이름을 기억한다.
					
					int[] no; -> 참조형 데이터 타입
					no = 10;  -> 기본 데이터 타입. 그렇기 때문에 안된다.
					
					
				
			ex)
				int[] num;
					==> 정수 여러개를 관리할 배열을 기억할 변수 선언 
					
			
			주의)
				int[] num = new float[5];	-----> X. Heap 에 만들어진 데이터 타입(float)과 배열에 만들 타입(int) 이 다르기 때문에 안됨
				==>	Heap Type이 다르기 때문에 안된다.
				
				int[] num = new int[5];		-----> O. 
									
		
		정리)
			1. 만들 배열이 Heap 에 생길 때 그 주소를 기억할 변수를 준비
			
			2. Heap 에 필요한 메모리를 만들고 그 주소를 준비한 변수에 기억시킨다.
			

배열 사용방법

	명령어 )
		
		변수[위치값];
		
		참고)
			위치값은 0부터 시작한다.
	
	
	참고)
		배열주소.length
		==> 배열주소(변수)가 관리하는 곳에 있는 메모리의 갯수를 알려주는 명령
		
--------------------------------------------------------------------------------------------------------------------------------------------------------

참고)
	배열의 초기화
	==> 배열 메모리는 Heap 에 생기므로 자동으로 초기화가 이루어진다.
			정수	0
			실수	0.0
			논리	false
			문자	아스키코드 0
		경우에 따라서는 배열 메모리에 강제로 특정값을 입력할 필요도 있다.
		==> 이것을 배열의 초기화라고 한다.
		
		형식 1)
			int[] num = {1, 2, 3, 4, 5};
		
		형식 2)
			int[] num = new int[]{1, 2, 3, 4, 5};
		
		
			
		***
		주의 )
			배열을 초기화 할 경우에는 배열의 크기를 입력하면 안된다.
			대신 초기화 데이터를 이용해서
			자동으로 배열의 크기가 결정된다.
			
	
	참고)
		Arrays.toString() 함수
		==> 배열을 출력하기 위해서는 
			반복명령을 이용해서 출력하는 것이 원칙이다.
			하지만 단순히 배열의 내용만 확인하는 차원에서는
			for 반복문을 이용하는 것이 불편하다.
			==>
				배열에 있는 데이터를 출력하기 위한 명령으로
				배열이 가진 모든 데이터를 문자열로 변환해서 반환해주는 기능을 가진 함수.
				
			
			주의)
				오직 배열의 내용 확인용도로만 사용해야 한다.
				
				break;
	
--------------------------------------------------------------------------------------------------------------------------------------------------------

오픈북 시험 페이지 page

17p
모듈의 개념, 공통 모듈
18p
유스케이스(use case Diagram) 정의
27p
모듈화 개념
30p
시퀀스 다이어그램(Sequence Diagram), 다이어그램 작성 예시
44p
코드의 개념, 기능
54p
시스템 연동의 개념, 데이터 연동, 인터페이스 연동, ***인터페이스 정의
67p
미들웨어 솔루션 정의, 유형(특히 *** 데이터베이스와 WAS)
68p
웹서버(정적인 콘텐츠), 웹 애플리케이션 서버(동적 서버 컨텐츠) 정의 및 웹서버와 와스 서버의 일반적인 구성
72p
기용성 향상을 위한 이중화 정의 및 방식 2가지(액티브-액티브, 액티브-스탠바이)
73p
재해 복구 시스템의 복구 수준별 유형(mirror site, hot site, warm site 읽어 보세요)






				
					
		
		
						
						
						
																					
						
					 
					
					
					
					
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		