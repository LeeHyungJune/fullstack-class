# day09

기본문법

함수

객체지향
	클래스
	인터페이스
	추상클래스
	
	유용한 클래스들...
	
	컬렉션...
		리스트, 셋, 맵
		
	쓰레드		
	입출력
	네트워크
-----------------------------------------------------------------------------------------------------------------------------------------------------------

	jdbc
	
	awt, swing	-	GUI 제작 클래스
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------		
	
함수(Method, Function)

	abc(...){}
	
	xyz(...){}
	
	abc(data);				- 자바에서는 이렇게 해야함.
	
	abc(function(){}, ) 	- 파이썬, 자바스크립트는 이게 가능(함수가 객체로서 기억이 됨)
	
함수란?
==> 한 가지 작업을 실행하기 위해 만들어진 가장 작은 단위의 프로그램.
	기능의 최소단위..
	
	프로그램이란?
	이런 함수들이 모여서 원하는 목적을 이루도록 구성하는 것.
	
	
	*****
	참고)
		1. 함수는 누군가 호출해야만 실행된다.
			==> 함수 스스로가 실행되는 경우는 없다.
		
		2. 함수는 실행이 완료되면 자신을 호출한 곳으로 실행순서를 넘긴다.
		
		예)
			class Test {
				static void abc() {
					(1)
				}
				
				public static void main{String[] args){
					(2)
					abc();
					(3)
				}
			
				static void xyz() {
					(4)
				}

			}
			
			실행순서)
				(2) --> (1) --> (3) --> 종료 
			
			
			class Test {
				static void abc() {
					(1)
					xyz()
					(2)
				}
				
				public static void main{String[] args){
					(3)
					abc();
					(4)
				}
			
				static void xyz() {
					(5)
				}

			}
			
				실행순서)
					(3) --> (1) --> (5) --> (2) --> (4) --> 종료
					
					
함수 만드는 법)
	
	형식)
		
		접근지정자		[속성]		반환값타입		팜수이름(매개변수리스트...) {
			함수내용
		}			

		1. 속성 )
			final		:	한 번 입력한 변수(데이터)를 수정할 수 없음(변수 이름을 대문자로). 상수
			static		:	static 함수 내에서는 static 속성에 올려진 것만 가능.
			absract
			...
			
			
		2. 접근지정자
			==> 해당 개체의 접근할 수 있는 권한을 지정해놓은 것.
				클래스 부분에서 설명.
-----------------------------------------------------------------------------------------------------------------------------------------------------------		
		3. 함수 이름
			==> 개발자(함수를 제작하는 사람)가 지정하는 사용자 정의어.
			
		4. 매개변수리스트
			==> 변수 선언 형태로 만드는 것.
				갯수와는 상관이 없다.
				
			==>
				함수가 원하는 작업을 하기 위해서 반드시 필요한 데이터가 있을 것이다.
				
		5. 반환값 타입
			==> 함수는 한 가지 목적을 달성하기 위한 가장 작은 단위의 프로그램이다.
				함수를 실행한다는 말은 그 목적을 달성하겠다. 라는 의미.
				이때 그 달성된 목적에 따라 결과가 존재할 수 있다.
				
				반환값 타입이란?
					==> 함수가 어떤 작업을 실행한 결과를 알려주는 것.
						==> 이 결과는 경우에 따라서 달라진다.
							결과가 존재하는 경우
							결과가 존재하지 않는 경우
							
							결과가 존재하는 경우는 그 결과에 대한 타입을 적어준다.
							
							결과가 존재하지 않는 경우
								반드시 "void" 라고 적어준다.
				
				참고)
					함수는 한 가지 목적을 위해 만들어지는
					가장 작은 단위의 프로그램이다.
					따라서, 반환값은 
						*****
						한 개 또는 없을 수 있다.
					반환값이 2개 이상인 함수는 자바에서는 절대로 만들 수 없다.
						
					예)
						
						publidc int, float abc() {
						}	====> 절대로 안된다.
			결론)
				함수는 4가지 형태를 벗어날 수 없다.
				
					1.
						void abc() {}
						
					2.
						int abc() {}
						
					3.
						void abc(int no) {}
					
					4.	
						int abc(int no) {}			반환값 있고 변수도 있는 것
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------		
	
	return 명령
		==> 함수 안에서 사용할 수 있는 명령.
		
		의미)
			1. 함수실행을 종료하세요.
			2. 결과가 있으면 결과를 내보내고 함수를 종료하세요.
			
		형식 1)
			==> 1번의 의미
			return;
				
		형식 2)
			==> 2번의 의미
			
			return 데이터;
			==> 데이터를 반환해주고(이 함수를 실행한 위치에 데이터를 내보내 주고)
				실행중인 이 함수를 종료하세요.
	
		참고)
			반환값이 void 인 경우는 반드시 return 만 사용할 수 있다.
			반환값이 void가 아닌 경우는 반드시 
				return 데이터; 
			의 형식만 사용할 수 있다.
			
			반환값이 void 인 경우는 return 을 생략할 수 있다.
			<== 함수의 내용이 다 실행되면 블럭이 닫히고 함수가 자동 종료되기 때문에...
			
=========================================================================================================================================================

함수의 사용방법
	==> 함수는 반드시 호출해야만 사용할 수 있다.
		따라서 함수를 사용한다는 것은 그 함수를 호출한다는 의미가 된다.
		
		형식)
			함수이름(데이터, ...)
			
			데이터란?
				==> 함수는 그 함수가 실행되기 위해 필요한 데이터를 받을 준비를 하고 있다.(매개변수)
					따라서 그 함수에 일을 시키기 위해서는 필요한 데이터를 반드시 입력해줘야 한다.
					==> 결론적으로 데이터(파라미터, Parameter)란?
						함수가 준비하고 있는 매개변수 리스트에 기억할 데이터를 제공하는 것...
						
					==>
						데이터는 그 함수가 준비한 매개변수의 갯수와 
						반드시 일치해야 하고(넘쳐도 안되고 모자라도 안된다.)
						그 형태 역시 일치해야 한다.
							
						예)
							void abc(int a){}
							
							==>
								abc();			// X : 데이터가 입력이 안됐다.
								abc(5);			// O
								abc(3.4);		// X : 데이터의 형태가 다르다.
								abc(3, 4);		// X : 갯수가 다르다.
								
-----------------------------------------------------------------------------------------------------------------------------------------------------------
반환값 사용 방법
		==> 함수의 실행이 종료되면 반환값을 줄 수 있다.
			이 반환값은 함수 호출 부분에 그대로 들어온다.
			
			따라서 함수 호출 부분에 예상되는 반환값을 기록해 보고
			문법적으로 이상이 없으면 그것이 반환값의 사용이 된다.
			
			예)
				int abc(){
					int k = 5;
					return k;
				}								
				
				void xyz(int a){}
				
				int lmn(int a){
					..
					return ??;
				}
				
				
				abc();							==>	O
				int a = abc();					==>	O
				System.out.println(abc());		==>	O
				xyz(abc());						==>	O xy(5)와 동일한 효과
				abc(lmn());						==>	X. 이런 함수는 만들어 놓지 않았따
				
				참고)
					반환값이 있는 함수라도 
					필요하지 않으면 반환값을 이용하지 않아도 상관없다.
				
					
	
	
	
	