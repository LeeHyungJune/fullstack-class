#	jdbc 01

JDBC
==>	자바 프로그램을 이용해서 데이터베이스를 컨트롤할 수 있는 외부 API
	
	데이터베이스는 그 데이터베이스가 가진 DBMS 에 의해서 성능이 결정된다.
	이 말은 각각의 데이터베이스마다 질의 명령을 처리하는 방법이 다르다는 것이다.
	이 말은 개발자 입장에서 보자면 데이터베이스마다 
	그 데이터베이스의 DBMS에 따라서 프로그램 방식을 다르게 해서 사용해야 한다.
	
	그래서
	자바안에 DBMS 를 만들어 놓고
	개발자는 자바의 DBMS 에게만 명령을 내리도록 해 놓았다.
	(자바에 있는 DBMS 방식으로만 작업하면 된다.)
	자바 안에 있는 DBMS가 실제 데이터베이와 연결해서 처리하도록 해 놓았따.
	
	이 문제를 해결하기 위한 DBMS 가 바로 JDBC 이다.
	우리가 JDBC 를 배운다는 것은
	결국 우리는 JDBC 에게만 명령을 전달하면 
	JDBC 가 알아서 필요한 데이터베이스의 DBMS 에게 명령을 전달하게 된다.
	따라서 개발자가 훨씬 편해질 것이다.

참고 )
	JDBC 와 실제 DBMS 를 연결하는 프로그램은
	그 데이터베이스를 만든 회사에서 제공한다.
	
*****
자바에서 개발자(데이터베이스 작업을 원하는 개발자)가 가장 먼저 해야할 일

	1.	사용하려는 데이터베이스와 JDBC 를 연결하는 프로그램을 찾아내는 것이다.
		이 프로그램을 "JDBC Driver" 라고 부른다.
	
	2.	찾아낸 외부 API 를 이클립스에 등록해서 이클립스에서
		이 외부 API 를 사용할 수 있도록 해야한다.
		
		외부 API 등록 방법
			1.	프로젝트 선택 
			2.	마우스 오른쪽 버튼 클릭
			3.	properties 클릭
			4.	java buildpath - libraries - add external jars.. 클릭
			5.	다운로드 받은 kar 파일 선택
	
	참고 )
		왜 인터페이스로 만들었나
		==>	세션을 관리하는 방법이 
			각 dbms 마다 다르기 때문에
			접속하는 순간 함수의 기능을
			거기에 맞도록 조절하기 위해서..
			
-------------------------------------------------------------------------------------

JDBC 프로그램 작성 순서
	0.	JDBC 드라이버를 준비
	1.	드라이버를 로딩한다.
		
		Class.forName(경로)
	
	2.	데이터베이스에 접속
	
		Connection con = DriverManager.getConnection(String url, String id, String pw);
	---------------------- 각 DBMS 들 마다 조금씩 작업이 다른 부분 ---------------------------
	
	3.	JDBC 와 실제 DBMS 사이에 명령을 전달할 수 있는 도구를 만들어야 한다.
		(오라클은 서버 데이터베이스다. 
			즉, 프로그램이 동작하는 컴퓨터와 데이터베이스가 있는 컴퓨터가 다를 수 있다.)
			
		사용하는 클래스(인터페이스) Statement
		
		만드는 방법
			Statement stmt = con.createStatement();
			
			참고 )
				질의 명령을 실행하는 방법
				(Statement 에 질의명령을 실어서 보내는 방법)
				
					1.	execute(String sql)
						==>	질의명령을 실행한 후 JDBC 에게 보고하지 않는다.
							반환값은 boolean 타입인데
							이 반환값의 의미는
							질의 명령이 잘 실행되었는지를 알려주는 반환값이 아니고
							데이터베이스가 JDBC 에게 명령을 받았는지만 알려주는 역할이다.
							
						주로 실행 여부와 관계없는 명령을 보낼 때
							CREATE, INSERT, ... 주로 사용하는 명령
					
					*****			
					2.	executeQuery(String sql)
						==>	반환값이 ResultSet 인데
							질의명령의 실행결과 탄생하는 인라인 테이블(가상의 테이블, 메모리상의 가상 테이블)
							관리하는 클래스이다.
							
							100% SELECT 질의명령에 사용한다.
					
					3.	executeUpdate(String sql)
						==>	반환값이 int 인데
							이 반환값의 의미는 질의명령의 실행 결과 
							수정된 데이터의 갯수를 반환해준다.
							예 )
								UPDATE 질의명령의 실행결과 몇 개의 행이 수정이 되었는지 알려준다
								DELETE 질의명령의 실행결과 몇 개의 행이 삭제가 되었는지 알려준다
							
							주로 질의 명령의 실행 결과 여부를 판단해야 할 경우
							사용하는 함수
								
								UPDATE, DELETE, INSERT, ...
								
												
	dno 라는 문자열을 입력받으면
 		부서번호를 입력받아서 해당 부서의 부서원들의 
 		사원번호, 사원이름, 직급, 입사일, 급여, 부서번호, 부서이름, 부서위치
 	를 출력해주고 
 	
SELECT
	empno, ename, job, hiredate, sal, e.deptno, dname, loc 
FROM
	emp e, dept d
	
WHERE	
	e.deptno = d.deptno
	AND e.deptno = ?
 	
 	job 이라는 문자열을 입력받으면 
 		해당 직급을 가진 사원들의
 		사원번호, 사원이름, 직급, 입사일, 급여, 급여등급, 커미션
 	을 조회하는 프로그램을 작성하시오.
 	
SELECT
	empno, ename, job, sal, hiredate, sal, grade, NVL(TO_CHAR(comm), '커미션없음') comm
FROM
	emp, salgrade
WHERE
	sal between losal and hisal
	AND job = ?
 
 	all 을 입력받으면 모든 사원들의
 		사원번호, 사원이름, 직급, 입사일
 	을 조회하는 프로그램을 작성하시오,						
		
				
	